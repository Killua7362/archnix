{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";

    nixpkgs-master.url = "github:NixOS/nixpkgs/master";
    nixpkgs-stable.url = "github:NixOS/nixpkgs/nixpkgs-22.05-darwin";
    nixpkgs-unstable.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
    nixos-stable.url = "github:NixOS/nixpkgs/nixos-22.05";

    home-manager = {
      url = "github:rycee/home-manager/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    neovim-nightly.url = "github:nix-community/neovim-nightly-overlay";
    comma = {
      url = "github:Shopify/comma";
      flake = false;
    };
    emacs.url = "github:nix-community/emacs-overlay";
    nur = {
      url = "github:nix-community/NUR";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    darwin.url = "github:LnL7/nix-darwin";
    darwin.inputs.nixpkgs.follows = "nixpkgs-unstable";

    prefmanager.url = "github:malob/prefmanager";
    prefmanager.inputs.nixpkgs.follows = "nixpkgs";
    prefmanager.inputs.flake-compat.follows = "flake-compat";
    prefmanager.inputs.flake-utils.follows = "flake-utils";

    mach-nix.url = "github:DavHau/mach-nix";
    flake-compat = {
      url = "github:edolstra/flake-compat";
      flake = false;
    };
    flake-utils.url = "github:numtide/flake-utils";
    mk-darwin-system.url = "github:vic/mk-darwin-system/main";
    spacebar.url = "github:cmacrae/spacebar/v1.3.0";
  };

  outputs = { self, flake-utils, home-manager, nixpkgs, neovim-nightly, nur
    , emacs, mach-nix, darwin, mk-darwin-system, ... }@inputs:
    let
      inherit (darwin.lib) darwinSystem;
      inherit (inputs.nixpkgs-unstable.lib)
      attrValues makeOverridable optionalAttrs singleton;
      nixpkgsConfig = {
        config = { allowUnfree = true; };
        overlays = attrValues self.overlays  ++ singleton (final: prev:
          (optionalAttrs (prev.stdenv.system == "aarch64-darwin") {
            inherit (final.pkgs-x86) idris2;
          }));
      };

      nixDarwinCommonModules = attrValues self.darwinModules ++ [
        home-manager.darwinModules.home-manager
        ({ config, ... }: {
          users.users."killua".home = "/Users/killua";
       
        })
      ];


##starting
      darwinFlakeOutput = mk-darwin-system.mkDarwinSystem.m1 {

        # Provide your nix modules to enable configurations on your system.
        #
        modules =attrValues self.darwinModules ++ [
            ./macnix/settings.nix

            ({ pkgs, lib, ... }: {
              environment.systemPackages = with pkgs; [ 
                wget
                 exa
                  nixfmt 
                  niv
                ];
            })

            { services.nix-daemon.enable = true; }
            {
              networking.computerName = "killua";
              networking.hostName = "killua";
              networking.knownNetworkServices = [ "Wi-Fi" "USB 10/100 LAN" ];
            }
     

          # User module
          ({ pkgs, lib, ... }: {
                      nixpkgs = nixpkgsConfig;
          nix.nixPath = { nixpkgs = "${inputs.nixpkgs-unstable}"; };
          nix.registry.my.flake = self;

                      home-manager.useGlobalPkgs = true;

            home-manager.users."killua" = {
            imports = attrValues self.commonhomeModules ++ [
              ./macnix/home.nix
            ];
            };
          })

          ({ lib, ... }: {
            nixpkgs.overlays = let nivSources = import ./macnix/niv/sources.nix;
            in [
              (new: old: {
                # You can provide an overlay for packages not available or that fail to compile on arm.
                inherit (lib.mds.intelPkgs) niv;

                # Provide apps managed by niv
                KeyttyApp = lib.mds.installNivDmg {
                  name = "Keytty";
                  src = nivSources.KeyttyApp;
                };

              })
            ];
          })

        ];
      };


##ending


      homeManagerConfigurations = {
        archnix = inputs.home-manager.lib.homeManagerConfiguration {
          configuration = { pkgs, lib, ... }: {
            imports = attrValues self.commonhomeModules ++ [ ./archnix/home.nix ];
            nixpkgs = {
              overlays =  attrValues self.commonoverlay ++ [
                neovim-nightly.overlay
                nur.overlay
                self.overlay
                emacs.overlay
                self.overrides
                (final: prev: {
                  comma = import inputs.comma {
                    pkgs = nixpkgs.legacyPackages."${prev.system}";
                  };
                  mach-nix = inputs.mach-nix.packages.${prev.system}.mach-nix;
                })
              ];
              config = {
                allowUnfree = true;
                cudaSupport = false;
                keep-derivations = true;
                keep-outputs = true;
              };
            };
          };
          system = "x86_64-linux";
          homeDirectory = "/home/killua";
          username = "killua";

        };
      };
    in {

      darwinConfigurations = rec {
     
                macnix = darwinFlakeOutput.darwinConfiguration.aarch64-darwin;

      };
    
      overlays = {
        neovim =  neovim-nightly.overlay;
    
        pkgs-master = final: prev: {
          pkgs-master = import inputs.nixpkgs-master {
            inherit (prev.stdenv) system;
            inherit (nixpkgsConfig) config;
          };
        };
   
        pkgs-stable = _: prev: {
          pkgs-stable = import inputs.nixpkgs-stable {
            inherit (prev.stdenv) system;
            inherit (nixpkgsConfig) config;
          };
        };
        pkgs-unstable = _: prev: {
          pkgs-unstable = import inputs.nixpkgs-unstable {
            inherit (prev.stdenv) system;
            inherit (nixpkgsConfig) config;
          };
        };

        prefmanager = _: prev: {
          prefmanager =
            inputs.prefmanager.packages.${prev.stdenv.system}.default;
        };

        # Overlay useful on Macs with Apple Silicon
        apple-silicon = _: prev:
          optionalAttrs (prev.stdenv.system == "aarch64-darwin") {
            # Add access to x86 packages system is running Apple Silicon
            pkgs-x86 = import inputs.nixpkgs-unstable {
              system = "x86_64-darwin";
              inherit (nixpkgsConfig) config;
            };
          };

      };

      darwinModules = {

      };

      commonhomeModules = { 
        git = import ./common/git.nix;
        packages = import ./common/packages.nix;

      };


    } // flake-utils.lib.eachDefaultSystem (system: {
      legacyPackages = import inputs.nixpkgs-unstable {
        inherit system;
        inherit (nixpkgsConfig) config;
        overlays = with self.overlays; [
          pkgs-master
          pkgs-stable
          apple-silicon
        ];
      };
    });

}
